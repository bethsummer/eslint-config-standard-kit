const { expect } = require('chai')
const { makeNodeDisklet } = require('disklet')
const { join } = require('path')
const packageJson = require('../package.json')

const { removeProps } = require('./utils.js')

const disklet = makeNodeDisklet(join(__dirname, '..'))

// Prettier already has well-maintained lists of formatting rules:
const prettierConfigs = [
  require('eslint-config-prettier'),
  require('eslint-config-prettier/@typescript-eslint'),
  require('eslint-config-prettier/flowtype'),
  require('eslint-config-prettier/react'),
  require('eslint-config-prettier/standard')
]

// Merge the blacklists:
const styleRules = []
for (const config of prettierConfigs) {
  for (const rule in config.rules) {
    expect(config.rules[rule]).oneOf([0, 'off'])
    styleRules.push(rule)
  }
}

function stringifyConfig(comment, config) {
  return `// ${comment}
// Auto-generated by ${packageJson.name}
"use strict";

module.exports = ${JSON.stringify(config, null, 2)};
`
}

/**
 * Writes out two copies of a config, one with format rules and one without.
 */
function writeConfig(name, comment, config) {
  const lintConfig = {
    ...config,
    rules: removeProps(config.rules, styleRules)
  }

  disklet.setText(`${name}.js`, stringifyConfig(`${comment} rules`, config))
  disklet.setText(
    `lint/${name}.js`,
    stringifyConfig(`${comment} rules without formatting`, lintConfig)
  )
}

function writeConfigs(configs) {
  for (const name in configs) {
    const { comment, config } = configs[name]
    writeConfig(name, comment, config)
  }
}

module.exports = { writeConfigs }
